State 18 conflicts: 1 reduce/reduce


Grammar

    0 $accept: prog $end

    1 prog: PROGRAM IDENTIFIER LPAREN identifier_list RPAREN SEMICOLON declarations subprogram_declarations compound_statement DOT

    2 identifier_list: IDENTIFIER
    3                | IDENTIFIER COMMA identifier_list

    4 declarations: declarations VAR identifier_list COLON type SEMICOLON
    5             | %empty

    6 type: standard_type
    7     | ARRAY LBRACE INTEGERNUM DOTDOT INTEGERNUM RBRACE OF type

    8 standard_type: INTEGER
    9              | REAL
   10              | STRING

   11 subprogram_declarations: subprogram_declarations subprogram_declaration SEMICOLON
   12                        | %empty

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement

   14 subprogram_head: FUNCTION IDENTIFIER arguments COLON standard_type SEMICOLON
   15                | PROCEDURE IDENTIFIER arguments SEMICOLON

   16 arguments: LPAREN parameter_list RPAREN
   17          | %empty

   18 parameter_list: optinal_var identifier_list COLON type
   19               | optinal_var identifier_list COLON type SEMICOLON parameter_list

   20 optinal_var: VAR
   21            | %empty

   22 compound_statement: PBEGIN optinal_statements END

   23 optinal_statements: statement_list
   24                   | %empty

   25 statement_list: statement
   26               | statement_list SEMICOLON statement

   27 statement: variable ASSIGNMENT expression
   28          | procdure_statement
   29          | compound_statement
   30          | IF expression THEN statement ELSE statement
   31          | WHILE expression DO statement
   32          | %empty

   33 variable: IDENTIFIER tail

   34 tail: LBRACE expression RBRACE tail
   35     | %empty

   36 procdure_statement: IDENTIFIER
   37                   | IDENTIFIER LPAREN expression_list RPAREN

   38 expression_list: expression
   39                | expression_list COMMA expression

   40 expression: boolexpression
   41           | boolexpression AND boolexpression
   42           | boolexpression OR boolexpression

   43 boolexpression: simple_expression
   44               | simple_expression relop simple_expression

   45 simple_expression: term
   46                  | simple_expression addop term

   47 term: factor
   48     | term mulop factor

   49 factor: IDENTIFIER tail
   50       | IDENTIFIER LPAREN expression_list RPAREN
   51       | num
   52       | LITERALSTR
   53       | LPAREN expression RPAREN
   54       | NOT factor
   55       | SUBOP factor

   56 addop: ADDOP
   57      | SUBOP

   58 mulop: MULOP
   59      | DIVOP

   60 relop: LTOP
   61      | GTOP
   62      | EQOP
   63      | GETOP
   64      | LETOP
   65      | NEQOP

   66 num: REALNUMBER
   67    | INTEGERNUM
   68    | SCIENTIFIC


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    PROGRAM (258) 1
    VAR (259) 4 20
    ARRAY (260) 7
    OF (261) 7
    INTEGER (262) 8
    REAL (263) 9
    STRING (264) 10
    FUNCTION (265) 14
    PROCEDURE (266) 15
    PBEGIN (267) 22
    END (268) 22
    IF (269) 30
    THEN (270) 30
    ELSE (271) 30
    WHILE (272) 31
    DO (273) 31
    NOT (274) 54
    AND (275) 41
    OR (276) 42
    LPAREN <text> (277) 1 16 37 50 53
    RPAREN <text> (278) 1 16 37 50 53
    SEMICOLON <text> (279) 1 4 11 14 15 19 26
    DOT <text> (280) 1
    COMMA <text> (281) 3 39
    COLON <text> (282) 4 14 18 19
    LBRACE <text> (283) 7 34
    RBRACE <text> (284) 7 34
    DOTDOT <text> (285) 7
    ASSIGNMENT <text> (286) 27
    ADDOP <text> (287) 56
    SUBOP <text> (288) 55 57
    MULOP <text> (289) 58
    DIVOP <text> (290) 59
    LTOP <text> (291) 60
    GTOP <text> (292) 61
    EQOP <text> (293) 62
    GETOP <text> (294) 63
    LETOP <text> (295) 64
    NEQOP <text> (296) 65
    IDENTIFIER <text> (297) 1 2 3 14 15 33 36 37 49 50
    REALNUMBER <dval> (298) 66
    INTEGERNUM <val> (299) 7 67
    SCIENTIFIC <text> (300) 68
    LITERALSTR <text> (301) 52


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    prog <node> (48)
        on left: 1
        on right: 0
    identifier_list <node> (49)
        on left: 2 3
        on right: 1 3 4 18 19
    declarations <node> (50)
        on left: 4 5
        on right: 1 4 13
    type <node> (51)
        on left: 6 7
        on right: 4 7 18 19
    standard_type <node> (52)
        on left: 8 9 10
        on right: 6 14
    subprogram_declarations <node> (53)
        on left: 11 12
        on right: 1 11 13
    subprogram_declaration <node> (54)
        on left: 13
        on right: 11
    subprogram_head <node> (55)
        on left: 14 15
        on right: 13
    arguments <node> (56)
        on left: 16 17
        on right: 14 15
    parameter_list <node> (57)
        on left: 18 19
        on right: 16 19
    optinal_var <node> (58)
        on left: 20 21
        on right: 18 19
    compound_statement <node> (59)
        on left: 22
        on right: 1 13 29
    optinal_statements <node> (60)
        on left: 23 24
        on right: 22
    statement_list <node> (61)
        on left: 25 26
        on right: 23 26
    statement <node> (62)
        on left: 27 28 29 30 31 32
        on right: 25 26 30 31
    variable <node> (63)
        on left: 33
        on right: 27
    tail <node> (64)
        on left: 34 35
        on right: 33 34 49
    procdure_statement <node> (65)
        on left: 36 37
        on right: 28
    expression_list <node> (66)
        on left: 38 39
        on right: 37 39 50
    expression <node> (67)
        on left: 40 41 42
        on right: 27 30 31 34 38 39 53
    boolexpression <node> (68)
        on left: 43 44
        on right: 40 41 42
    simple_expression <node> (69)
        on left: 45 46
        on right: 43 44 46
    term <node> (70)
        on left: 47 48
        on right: 45 46 48
    factor <node> (71)
        on left: 49 50 51 52 53 54 55
        on right: 47 48 54 55
    addop <node> (72)
        on left: 56 57
        on right: 46
    mulop <node> (73)
        on left: 58 59
        on right: 48
    relop <node> (74)
        on left: 60 61 62 63 64 65
        on right: 44
    num <node> (75)
        on left: 66 67 68
        on right: 51


State 0

    0 $accept: . prog $end

    PROGRAM  shift, and go to state 1

    prog  go to state 2


State 1

    1 prog: PROGRAM . IDENTIFIER LPAREN identifier_list RPAREN SEMICOLON declarations subprogram_declarations compound_statement DOT

    IDENTIFIER  shift, and go to state 3


State 2

    0 $accept: prog . $end

    $end  shift, and go to state 4


State 3

    1 prog: PROGRAM IDENTIFIER . LPAREN identifier_list RPAREN SEMICOLON declarations subprogram_declarations compound_statement DOT

    LPAREN  shift, and go to state 5


State 4

    0 $accept: prog $end .

    $default  accept


State 5

    1 prog: PROGRAM IDENTIFIER LPAREN . identifier_list RPAREN SEMICOLON declarations subprogram_declarations compound_statement DOT

    IDENTIFIER  shift, and go to state 6

    identifier_list  go to state 7


State 6

    2 identifier_list: IDENTIFIER .
    3                | IDENTIFIER . COMMA identifier_list

    COMMA  shift, and go to state 8

    $default  reduce using rule 2 (identifier_list)


State 7

    1 prog: PROGRAM IDENTIFIER LPAREN identifier_list . RPAREN SEMICOLON declarations subprogram_declarations compound_statement DOT

    RPAREN  shift, and go to state 9


State 8

    3 identifier_list: IDENTIFIER COMMA . identifier_list

    IDENTIFIER  shift, and go to state 6

    identifier_list  go to state 10


State 9

    1 prog: PROGRAM IDENTIFIER LPAREN identifier_list RPAREN . SEMICOLON declarations subprogram_declarations compound_statement DOT

    SEMICOLON  shift, and go to state 11


State 10

    3 identifier_list: IDENTIFIER COMMA identifier_list .

    $default  reduce using rule 3 (identifier_list)


State 11

    1 prog: PROGRAM IDENTIFIER LPAREN identifier_list RPAREN SEMICOLON . declarations subprogram_declarations compound_statement DOT

    $default  reduce using rule 5 (declarations)

    declarations  go to state 12


State 12

    1 prog: PROGRAM IDENTIFIER LPAREN identifier_list RPAREN SEMICOLON declarations . subprogram_declarations compound_statement DOT
    4 declarations: declarations . VAR identifier_list COLON type SEMICOLON

    VAR  shift, and go to state 13

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 14


State 13

    4 declarations: declarations VAR . identifier_list COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 6

    identifier_list  go to state 15


State 14

    1 prog: PROGRAM IDENTIFIER LPAREN identifier_list RPAREN SEMICOLON declarations subprogram_declarations . compound_statement DOT
   11 subprogram_declarations: subprogram_declarations . subprogram_declaration SEMICOLON

    FUNCTION   shift, and go to state 16
    PROCEDURE  shift, and go to state 17
    PBEGIN     shift, and go to state 18

    subprogram_declaration  go to state 19
    subprogram_head         go to state 20
    compound_statement      go to state 21


State 15

    4 declarations: declarations VAR identifier_list . COLON type SEMICOLON

    COLON  shift, and go to state 22


State 16

   14 subprogram_head: FUNCTION . IDENTIFIER arguments COLON standard_type SEMICOLON

    IDENTIFIER  shift, and go to state 23


State 17

   15 subprogram_head: PROCEDURE . IDENTIFIER arguments SEMICOLON

    IDENTIFIER  shift, and go to state 24


State 18

   22 compound_statement: PBEGIN . optinal_statements END

    PBEGIN      shift, and go to state 18
    IF          shift, and go to state 25
    WHILE       shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    END        reduce using rule 24 (optinal_statements)
    END        [reduce using rule 32 (statement)]
    SEMICOLON  reduce using rule 32 (statement)
    $default   reduce using rule 24 (optinal_statements)

    compound_statement  go to state 28
    optinal_statements  go to state 29
    statement_list      go to state 30
    statement           go to state 31
    variable            go to state 32
    procdure_statement  go to state 33


State 19

   11 subprogram_declarations: subprogram_declarations subprogram_declaration . SEMICOLON

    SEMICOLON  shift, and go to state 34


State 20

   13 subprogram_declaration: subprogram_head . declarations subprogram_declarations compound_statement

    $default  reduce using rule 5 (declarations)

    declarations  go to state 35


State 21

    1 prog: PROGRAM IDENTIFIER LPAREN identifier_list RPAREN SEMICOLON declarations subprogram_declarations compound_statement . DOT

    DOT  shift, and go to state 36


State 22

    4 declarations: declarations VAR identifier_list COLON . type SEMICOLON

    ARRAY    shift, and go to state 37
    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39
    STRING   shift, and go to state 40

    type           go to state 41
    standard_type  go to state 42


State 23

   14 subprogram_head: FUNCTION IDENTIFIER . arguments COLON standard_type SEMICOLON

    LPAREN  shift, and go to state 43

    $default  reduce using rule 17 (arguments)

    arguments  go to state 44


State 24

   15 subprogram_head: PROCEDURE IDENTIFIER . arguments SEMICOLON

    LPAREN  shift, and go to state 43

    $default  reduce using rule 17 (arguments)

    arguments  go to state 45


State 25

   30 statement: IF . expression THEN statement ELSE statement

    NOT         shift, and go to state 46
    LPAREN      shift, and go to state 47
    SUBOP       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49
    REALNUMBER  shift, and go to state 50
    INTEGERNUM  shift, and go to state 51
    SCIENTIFIC  shift, and go to state 52
    LITERALSTR  shift, and go to state 53

    expression         go to state 54
    boolexpression     go to state 55
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    num                go to state 59


State 26

   31 statement: WHILE . expression DO statement

    NOT         shift, and go to state 46
    LPAREN      shift, and go to state 47
    SUBOP       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49
    REALNUMBER  shift, and go to state 50
    INTEGERNUM  shift, and go to state 51
    SCIENTIFIC  shift, and go to state 52
    LITERALSTR  shift, and go to state 53

    expression         go to state 60
    boolexpression     go to state 55
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    num                go to state 59


State 27

   33 variable: IDENTIFIER . tail
   36 procdure_statement: IDENTIFIER .
   37                   | IDENTIFIER . LPAREN expression_list RPAREN

    LPAREN  shift, and go to state 61
    LBRACE  shift, and go to state 62

    ASSIGNMENT  reduce using rule 35 (tail)
    $default    reduce using rule 36 (procdure_statement)

    tail  go to state 63


State 28

   29 statement: compound_statement .

    $default  reduce using rule 29 (statement)


State 29

   22 compound_statement: PBEGIN optinal_statements . END

    END  shift, and go to state 64


State 30

   23 optinal_statements: statement_list .
   26 statement_list: statement_list . SEMICOLON statement

    SEMICOLON  shift, and go to state 65

    $default  reduce using rule 23 (optinal_statements)


State 31

   25 statement_list: statement .

    $default  reduce using rule 25 (statement_list)


State 32

   27 statement: variable . ASSIGNMENT expression

    ASSIGNMENT  shift, and go to state 66


State 33

   28 statement: procdure_statement .

    $default  reduce using rule 28 (statement)


State 34

   11 subprogram_declarations: subprogram_declarations subprogram_declaration SEMICOLON .

    $default  reduce using rule 11 (subprogram_declarations)


State 35

    4 declarations: declarations . VAR identifier_list COLON type SEMICOLON
   13 subprogram_declaration: subprogram_head declarations . subprogram_declarations compound_statement

    VAR  shift, and go to state 13

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 67


State 36

    1 prog: PROGRAM IDENTIFIER LPAREN identifier_list RPAREN SEMICOLON declarations subprogram_declarations compound_statement DOT .

    $default  reduce using rule 1 (prog)


State 37

    7 type: ARRAY . LBRACE INTEGERNUM DOTDOT INTEGERNUM RBRACE OF type

    LBRACE  shift, and go to state 68


State 38

    8 standard_type: INTEGER .

    $default  reduce using rule 8 (standard_type)


State 39

    9 standard_type: REAL .

    $default  reduce using rule 9 (standard_type)


State 40

   10 standard_type: STRING .

    $default  reduce using rule 10 (standard_type)


State 41

    4 declarations: declarations VAR identifier_list COLON type . SEMICOLON

    SEMICOLON  shift, and go to state 69


State 42

    6 type: standard_type .

    $default  reduce using rule 6 (type)


State 43

   16 arguments: LPAREN . parameter_list RPAREN

    VAR  shift, and go to state 70

    $default  reduce using rule 21 (optinal_var)

    parameter_list  go to state 71
    optinal_var     go to state 72


State 44

   14 subprogram_head: FUNCTION IDENTIFIER arguments . COLON standard_type SEMICOLON

    COLON  shift, and go to state 73


State 45

   15 subprogram_head: PROCEDURE IDENTIFIER arguments . SEMICOLON

    SEMICOLON  shift, and go to state 74


State 46

   54 factor: NOT . factor

    NOT         shift, and go to state 46
    LPAREN      shift, and go to state 47
    SUBOP       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49
    REALNUMBER  shift, and go to state 50
    INTEGERNUM  shift, and go to state 51
    SCIENTIFIC  shift, and go to state 52
    LITERALSTR  shift, and go to state 53

    factor  go to state 75
    num     go to state 59


State 47

   53 factor: LPAREN . expression RPAREN

    NOT         shift, and go to state 46
    LPAREN      shift, and go to state 47
    SUBOP       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49
    REALNUMBER  shift, and go to state 50
    INTEGERNUM  shift, and go to state 51
    SCIENTIFIC  shift, and go to state 52
    LITERALSTR  shift, and go to state 53

    expression         go to state 76
    boolexpression     go to state 55
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    num                go to state 59


State 48

   55 factor: SUBOP . factor

    NOT         shift, and go to state 46
    LPAREN      shift, and go to state 47
    SUBOP       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49
    REALNUMBER  shift, and go to state 50
    INTEGERNUM  shift, and go to state 51
    SCIENTIFIC  shift, and go to state 52
    LITERALSTR  shift, and go to state 53

    factor  go to state 77
    num     go to state 59


State 49

   49 factor: IDENTIFIER . tail
   50       | IDENTIFIER . LPAREN expression_list RPAREN

    LPAREN  shift, and go to state 78
    LBRACE  shift, and go to state 62

    $default  reduce using rule 35 (tail)

    tail  go to state 79


State 50

   66 num: REALNUMBER .

    $default  reduce using rule 66 (num)


State 51

   67 num: INTEGERNUM .

    $default  reduce using rule 67 (num)


State 52

   68 num: SCIENTIFIC .

    $default  reduce using rule 68 (num)


State 53

   52 factor: LITERALSTR .

    $default  reduce using rule 52 (factor)


State 54

   30 statement: IF expression . THEN statement ELSE statement

    THEN  shift, and go to state 80


State 55

   40 expression: boolexpression .
   41           | boolexpression . AND boolexpression
   42           | boolexpression . OR boolexpression

    AND  shift, and go to state 81
    OR   shift, and go to state 82

    $default  reduce using rule 40 (expression)


State 56

   43 boolexpression: simple_expression .
   44               | simple_expression . relop simple_expression
   46 simple_expression: simple_expression . addop term

    ADDOP  shift, and go to state 83
    SUBOP  shift, and go to state 84
    LTOP   shift, and go to state 85
    GTOP   shift, and go to state 86
    EQOP   shift, and go to state 87
    GETOP  shift, and go to state 88
    LETOP  shift, and go to state 89
    NEQOP  shift, and go to state 90

    $default  reduce using rule 43 (boolexpression)

    addop  go to state 91
    relop  go to state 92


State 57

   45 simple_expression: term .
   48 term: term . mulop factor

    MULOP  shift, and go to state 93
    DIVOP  shift, and go to state 94

    $default  reduce using rule 45 (simple_expression)

    mulop  go to state 95


State 58

   47 term: factor .

    $default  reduce using rule 47 (term)


State 59

   51 factor: num .

    $default  reduce using rule 51 (factor)


State 60

   31 statement: WHILE expression . DO statement

    DO  shift, and go to state 96


State 61

   37 procdure_statement: IDENTIFIER LPAREN . expression_list RPAREN

    NOT         shift, and go to state 46
    LPAREN      shift, and go to state 47
    SUBOP       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49
    REALNUMBER  shift, and go to state 50
    INTEGERNUM  shift, and go to state 51
    SCIENTIFIC  shift, and go to state 52
    LITERALSTR  shift, and go to state 53

    expression_list    go to state 97
    expression         go to state 98
    boolexpression     go to state 55
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    num                go to state 59


State 62

   34 tail: LBRACE . expression RBRACE tail

    NOT         shift, and go to state 46
    LPAREN      shift, and go to state 47
    SUBOP       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49
    REALNUMBER  shift, and go to state 50
    INTEGERNUM  shift, and go to state 51
    SCIENTIFIC  shift, and go to state 52
    LITERALSTR  shift, and go to state 53

    expression         go to state 99
    boolexpression     go to state 55
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    num                go to state 59


State 63

   33 variable: IDENTIFIER tail .

    $default  reduce using rule 33 (variable)


State 64

   22 compound_statement: PBEGIN optinal_statements END .

    $default  reduce using rule 22 (compound_statement)


State 65

   26 statement_list: statement_list SEMICOLON . statement

    PBEGIN      shift, and go to state 18
    IF          shift, and go to state 25
    WHILE       shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 32 (statement)

    compound_statement  go to state 28
    statement           go to state 100
    variable            go to state 32
    procdure_statement  go to state 33


State 66

   27 statement: variable ASSIGNMENT . expression

    NOT         shift, and go to state 46
    LPAREN      shift, and go to state 47
    SUBOP       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49
    REALNUMBER  shift, and go to state 50
    INTEGERNUM  shift, and go to state 51
    SCIENTIFIC  shift, and go to state 52
    LITERALSTR  shift, and go to state 53

    expression         go to state 101
    boolexpression     go to state 55
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    num                go to state 59


State 67

   11 subprogram_declarations: subprogram_declarations . subprogram_declaration SEMICOLON
   13 subprogram_declaration: subprogram_head declarations subprogram_declarations . compound_statement

    FUNCTION   shift, and go to state 16
    PROCEDURE  shift, and go to state 17
    PBEGIN     shift, and go to state 18

    subprogram_declaration  go to state 19
    subprogram_head         go to state 20
    compound_statement      go to state 102


State 68

    7 type: ARRAY LBRACE . INTEGERNUM DOTDOT INTEGERNUM RBRACE OF type

    INTEGERNUM  shift, and go to state 103


State 69

    4 declarations: declarations VAR identifier_list COLON type SEMICOLON .

    $default  reduce using rule 4 (declarations)


State 70

   20 optinal_var: VAR .

    $default  reduce using rule 20 (optinal_var)


State 71

   16 arguments: LPAREN parameter_list . RPAREN

    RPAREN  shift, and go to state 104


State 72

   18 parameter_list: optinal_var . identifier_list COLON type
   19               | optinal_var . identifier_list COLON type SEMICOLON parameter_list

    IDENTIFIER  shift, and go to state 6

    identifier_list  go to state 105


State 73

   14 subprogram_head: FUNCTION IDENTIFIER arguments COLON . standard_type SEMICOLON

    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39
    STRING   shift, and go to state 40

    standard_type  go to state 106


State 74

   15 subprogram_head: PROCEDURE IDENTIFIER arguments SEMICOLON .

    $default  reduce using rule 15 (subprogram_head)


State 75

   54 factor: NOT factor .

    $default  reduce using rule 54 (factor)


State 76

   53 factor: LPAREN expression . RPAREN

    RPAREN  shift, and go to state 107


State 77

   55 factor: SUBOP factor .

    $default  reduce using rule 55 (factor)


State 78

   50 factor: IDENTIFIER LPAREN . expression_list RPAREN

    NOT         shift, and go to state 46
    LPAREN      shift, and go to state 47
    SUBOP       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49
    REALNUMBER  shift, and go to state 50
    INTEGERNUM  shift, and go to state 51
    SCIENTIFIC  shift, and go to state 52
    LITERALSTR  shift, and go to state 53

    expression_list    go to state 108
    expression         go to state 98
    boolexpression     go to state 55
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    num                go to state 59


State 79

   49 factor: IDENTIFIER tail .

    $default  reduce using rule 49 (factor)


State 80

   30 statement: IF expression THEN . statement ELSE statement

    PBEGIN      shift, and go to state 18
    IF          shift, and go to state 25
    WHILE       shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 32 (statement)

    compound_statement  go to state 28
    statement           go to state 109
    variable            go to state 32
    procdure_statement  go to state 33


State 81

   41 expression: boolexpression AND . boolexpression

    NOT         shift, and go to state 46
    LPAREN      shift, and go to state 47
    SUBOP       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49
    REALNUMBER  shift, and go to state 50
    INTEGERNUM  shift, and go to state 51
    SCIENTIFIC  shift, and go to state 52
    LITERALSTR  shift, and go to state 53

    boolexpression     go to state 110
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    num                go to state 59


State 82

   42 expression: boolexpression OR . boolexpression

    NOT         shift, and go to state 46
    LPAREN      shift, and go to state 47
    SUBOP       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49
    REALNUMBER  shift, and go to state 50
    INTEGERNUM  shift, and go to state 51
    SCIENTIFIC  shift, and go to state 52
    LITERALSTR  shift, and go to state 53

    boolexpression     go to state 111
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    num                go to state 59


State 83

   56 addop: ADDOP .

    $default  reduce using rule 56 (addop)


State 84

   57 addop: SUBOP .

    $default  reduce using rule 57 (addop)


State 85

   60 relop: LTOP .

    $default  reduce using rule 60 (relop)


State 86

   61 relop: GTOP .

    $default  reduce using rule 61 (relop)


State 87

   62 relop: EQOP .

    $default  reduce using rule 62 (relop)


State 88

   63 relop: GETOP .

    $default  reduce using rule 63 (relop)


State 89

   64 relop: LETOP .

    $default  reduce using rule 64 (relop)


State 90

   65 relop: NEQOP .

    $default  reduce using rule 65 (relop)


State 91

   46 simple_expression: simple_expression addop . term

    NOT         shift, and go to state 46
    LPAREN      shift, and go to state 47
    SUBOP       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49
    REALNUMBER  shift, and go to state 50
    INTEGERNUM  shift, and go to state 51
    SCIENTIFIC  shift, and go to state 52
    LITERALSTR  shift, and go to state 53

    term    go to state 112
    factor  go to state 58
    num     go to state 59


State 92

   44 boolexpression: simple_expression relop . simple_expression

    NOT         shift, and go to state 46
    LPAREN      shift, and go to state 47
    SUBOP       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49
    REALNUMBER  shift, and go to state 50
    INTEGERNUM  shift, and go to state 51
    SCIENTIFIC  shift, and go to state 52
    LITERALSTR  shift, and go to state 53

    simple_expression  go to state 113
    term               go to state 57
    factor             go to state 58
    num                go to state 59


State 93

   58 mulop: MULOP .

    $default  reduce using rule 58 (mulop)


State 94

   59 mulop: DIVOP .

    $default  reduce using rule 59 (mulop)


State 95

   48 term: term mulop . factor

    NOT         shift, and go to state 46
    LPAREN      shift, and go to state 47
    SUBOP       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49
    REALNUMBER  shift, and go to state 50
    INTEGERNUM  shift, and go to state 51
    SCIENTIFIC  shift, and go to state 52
    LITERALSTR  shift, and go to state 53

    factor  go to state 114
    num     go to state 59


State 96

   31 statement: WHILE expression DO . statement

    PBEGIN      shift, and go to state 18
    IF          shift, and go to state 25
    WHILE       shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 32 (statement)

    compound_statement  go to state 28
    statement           go to state 115
    variable            go to state 32
    procdure_statement  go to state 33


State 97

   37 procdure_statement: IDENTIFIER LPAREN expression_list . RPAREN
   39 expression_list: expression_list . COMMA expression

    RPAREN  shift, and go to state 116
    COMMA   shift, and go to state 117


State 98

   38 expression_list: expression .

    $default  reduce using rule 38 (expression_list)


State 99

   34 tail: LBRACE expression . RBRACE tail

    RBRACE  shift, and go to state 118


State 100

   26 statement_list: statement_list SEMICOLON statement .

    $default  reduce using rule 26 (statement_list)


State 101

   27 statement: variable ASSIGNMENT expression .

    $default  reduce using rule 27 (statement)


State 102

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement .

    $default  reduce using rule 13 (subprogram_declaration)


State 103

    7 type: ARRAY LBRACE INTEGERNUM . DOTDOT INTEGERNUM RBRACE OF type

    DOTDOT  shift, and go to state 119


State 104

   16 arguments: LPAREN parameter_list RPAREN .

    $default  reduce using rule 16 (arguments)


State 105

   18 parameter_list: optinal_var identifier_list . COLON type
   19               | optinal_var identifier_list . COLON type SEMICOLON parameter_list

    COLON  shift, and go to state 120


State 106

   14 subprogram_head: FUNCTION IDENTIFIER arguments COLON standard_type . SEMICOLON

    SEMICOLON  shift, and go to state 121


State 107

   53 factor: LPAREN expression RPAREN .

    $default  reduce using rule 53 (factor)


State 108

   39 expression_list: expression_list . COMMA expression
   50 factor: IDENTIFIER LPAREN expression_list . RPAREN

    RPAREN  shift, and go to state 122
    COMMA   shift, and go to state 117


State 109

   30 statement: IF expression THEN statement . ELSE statement

    ELSE  shift, and go to state 123


State 110

   41 expression: boolexpression AND boolexpression .

    $default  reduce using rule 41 (expression)


State 111

   42 expression: boolexpression OR boolexpression .

    $default  reduce using rule 42 (expression)


State 112

   46 simple_expression: simple_expression addop term .
   48 term: term . mulop factor

    MULOP  shift, and go to state 93
    DIVOP  shift, and go to state 94

    $default  reduce using rule 46 (simple_expression)

    mulop  go to state 95


State 113

   44 boolexpression: simple_expression relop simple_expression .
   46 simple_expression: simple_expression . addop term

    ADDOP  shift, and go to state 83
    SUBOP  shift, and go to state 84

    $default  reduce using rule 44 (boolexpression)

    addop  go to state 91


State 114

   48 term: term mulop factor .

    $default  reduce using rule 48 (term)


State 115

   31 statement: WHILE expression DO statement .

    $default  reduce using rule 31 (statement)


State 116

   37 procdure_statement: IDENTIFIER LPAREN expression_list RPAREN .

    $default  reduce using rule 37 (procdure_statement)


State 117

   39 expression_list: expression_list COMMA . expression

    NOT         shift, and go to state 46
    LPAREN      shift, and go to state 47
    SUBOP       shift, and go to state 48
    IDENTIFIER  shift, and go to state 49
    REALNUMBER  shift, and go to state 50
    INTEGERNUM  shift, and go to state 51
    SCIENTIFIC  shift, and go to state 52
    LITERALSTR  shift, and go to state 53

    expression         go to state 124
    boolexpression     go to state 55
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    num                go to state 59


State 118

   34 tail: LBRACE expression RBRACE . tail

    LBRACE  shift, and go to state 62

    $default  reduce using rule 35 (tail)

    tail  go to state 125


State 119

    7 type: ARRAY LBRACE INTEGERNUM DOTDOT . INTEGERNUM RBRACE OF type

    INTEGERNUM  shift, and go to state 126


State 120

   18 parameter_list: optinal_var identifier_list COLON . type
   19               | optinal_var identifier_list COLON . type SEMICOLON parameter_list

    ARRAY    shift, and go to state 37
    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39
    STRING   shift, and go to state 40

    type           go to state 127
    standard_type  go to state 42


State 121

   14 subprogram_head: FUNCTION IDENTIFIER arguments COLON standard_type SEMICOLON .

    $default  reduce using rule 14 (subprogram_head)


State 122

   50 factor: IDENTIFIER LPAREN expression_list RPAREN .

    $default  reduce using rule 50 (factor)


State 123

   30 statement: IF expression THEN statement ELSE . statement

    PBEGIN      shift, and go to state 18
    IF          shift, and go to state 25
    WHILE       shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 32 (statement)

    compound_statement  go to state 28
    statement           go to state 128
    variable            go to state 32
    procdure_statement  go to state 33


State 124

   39 expression_list: expression_list COMMA expression .

    $default  reduce using rule 39 (expression_list)


State 125

   34 tail: LBRACE expression RBRACE tail .

    $default  reduce using rule 34 (tail)


State 126

    7 type: ARRAY LBRACE INTEGERNUM DOTDOT INTEGERNUM . RBRACE OF type

    RBRACE  shift, and go to state 129


State 127

   18 parameter_list: optinal_var identifier_list COLON type .
   19               | optinal_var identifier_list COLON type . SEMICOLON parameter_list

    SEMICOLON  shift, and go to state 130

    $default  reduce using rule 18 (parameter_list)


State 128

   30 statement: IF expression THEN statement ELSE statement .

    $default  reduce using rule 30 (statement)


State 129

    7 type: ARRAY LBRACE INTEGERNUM DOTDOT INTEGERNUM RBRACE . OF type

    OF  shift, and go to state 131


State 130

   19 parameter_list: optinal_var identifier_list COLON type SEMICOLON . parameter_list

    VAR  shift, and go to state 70

    $default  reduce using rule 21 (optinal_var)

    parameter_list  go to state 132
    optinal_var     go to state 72


State 131

    7 type: ARRAY LBRACE INTEGERNUM DOTDOT INTEGERNUM RBRACE OF . type

    ARRAY    shift, and go to state 37
    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39
    STRING   shift, and go to state 40

    type           go to state 133
    standard_type  go to state 42


State 132

   19 parameter_list: optinal_var identifier_list COLON type SEMICOLON parameter_list .

    $default  reduce using rule 19 (parameter_list)


State 133

    7 type: ARRAY LBRACE INTEGERNUM DOTDOT INTEGERNUM RBRACE OF type .

    $default  reduce using rule 7 (type)
